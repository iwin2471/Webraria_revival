{
  "version": 3,
  "sources": ["../src/js/canvas.ts", "../src/js/player/Position.mts", "../src/js/player/base_player.ts", "../src/js/player/player.mts", "../src/js/engine/world/tilemap.ts", "../src/js/utils/perlin.ts", "../src/js/engine/world/worldgen.ts", "../src/js/engine/world/world.ts", "../src/js/engine/game.ts", "../src/js/index.ts"],
  "sourcesContent": ["export default class Canvas {\n  private element: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private static instance: Canvas;\n  private constructor() {}\n\n  public static getInstance() {\n    if (this.instance == null) {\n      this.instance = new Canvas();\n    }\n    return this.instance;\n  }\n\n  //TODO:\n  //\uAC8C\uC784 \uCE74\uBA54\uB77C \uB4F1 \uC124\uC815 \uBAA8\uB450 \uB2E4 \uC62E\uAE30\uAE30\n  //\uC2A4\uD0C0\uB4C0, \uC0CC\uB4DC\uBC15\uC2A4, \uD14C\uB77C\uB9AC\uC544, \uB178\uB9E8\uC2A4\uC2A4\uCE74\uC774, \uAD74\uCC29\uAE30\n  public initElement(canvasId: string) {\n    this.element = document.getElementById(canvasId) as HTMLCanvasElement;\n    this.context = this.element.getContext(\"2d\");\n    this.context.scale(2, 2);\n    this.context.translate(0, -2500);\n  }\n\n  public getContext() {\n    return this.context;\n  }\n\n  public getElement() {\n    return this.element;\n  }\n}\n", "export default class Position {\n  x: number;\n  y: number;\n\n  constructor();\n  constructor(x?: number, y?: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n", "import Position from \"./Position.mts\";\nimport Movable from \"./movable\";\nimport Drawable from \"../engine/drawable\";\nimport Canvas from \"../canvas\";\n\nexport default abstract class BasePlayer implements Movable, Drawable {\n  name: String;\n  sprite: HTMLImageElement = new Image();\n  loaded: boolean = false;\n  movementSpeed: number = 8;\n  readonly position: Position = new Position();\n  readonly width: number = 8;\n  readonly height: number = 16;\n\n  constructor(name: string, spriteURL: string) {\n    this.name = name;\n    this.sprite.src = spriteURL;\n\n    this.sprite.onload = () => {\n      this.loaded = true;\n    };\n  }\n  get speed(): number {\n    return this.movementSpeed;\n  }\n\n  public setPosition(x: number, y: number) {\n    this.position.setXY(x, y);\n  }\n\n  public get x(): number {\n    return this.position.x;\n  }\n\n  public get y(): number {\n    return this.position.y;\n  }\n\n  public clearRect(): void {\n    Canvas.getInstance()\n      .getContext()\n      .clearRect(this.x, this.y, this.width, this.height);\n  }\n\n  protected isMonster(): boolean {\n    return false;\n  }\n}\n", "import BasePlayer from \"./base_player\";\n\nexport default class Player extends BasePlayer {\n  sideMovementSpeed: number = 8;\n  jumpForce: number = 8;\n  canJump: boolean = false;\n\n  constructor(playerName: string, spriteSrc: string) {\n    super(playerName, spriteSrc);\n  }\n}\n", "const worldTerrainSave = new Array();\n\nfor (let i = 0; i < 1920 * 5; i++) {\n  worldTerrainSave[i] = new Array();\n}\n\nclass Terrain {\n  private static instance: Terrain = new Terrain();\n  static readonly tileSize = 8;\n  readonly tileMap: object = {\n    tile: {\n      dirt: [new Image(), new Image(), new Image(), new Image()],\n      water: [new Image(), new Image(), new Image(), new Image()],\n    },\n    ore: [new Image(), new Image(), new Image(), new Image(), new Image()],\n  };\n\n  private constructor() {\n    //Dirt Images\n    this.tileMap[\"tile\"][\"dirt\"][0].src =\n      \"Resource/Tiles/dirt/floor_dirt01.png\";\n    this.tileMap[\"tile\"][\"dirt\"][1].src =\n      \"Resource/Tiles/dirt/floor_dirt02.png\";\n    this.tileMap[\"tile\"][\"dirt\"][2].src =\n      \"Resource/Tiles/dirt/floor_dirt03.png\";\n    this.tileMap[\"tile\"][\"dirt\"][3].src =\n      \"Resource/Tiles/dirt/floor_dirt04.png\";\n\n    //Water Images\n    this.tileMap[\"tile\"][\"water\"][0].src =\n      \"Resource/Tiles/liquid/water_opacity_90.png\";\n    this.tileMap[\"tile\"][\"water\"][0].src =\n      \"Resource/Tiles/liquid/water_opacity_95.png\";\n    this.tileMap[\"tile\"][\"water\"][0].src =\n      \"Resource/Tiles/liquid/water_surface_opacity_90.png\";\n    this.tileMap[\"tile\"][\"water\"][0].src =\n      \"Resource/Tiles/liquid/water_surface_opacity_95.png\";\n\n    //Object Images\n    this.tileMap[\"ore\"][0].src = \"Resource/Tiles/Mineral/copperS.png\";\n    this.tileMap[\"ore\"][1].src = \"Resource/Tiles/Mineral/iro.png\";\n    this.tileMap[\"ore\"][2].src = \"Resource/Tiles/Mineral/dia2.png\";\n    this.tileMap[\"ore\"][3].src = \"Resource/Tiles/object/stone.png\";\n    this.tileMap[\"ore\"][4].src = \"Resource/Tiles/dirt/floor_dirt04.png\";\n  }\n\n  public static getInstance() {\n    return this.instance;\n  }\n}\n\nexport { worldTerrainSave, Terrain };\n", "export default class Perlin {\n  psng: PSNG;\n  x = 0;\n  amp: number;\n  wl: number;\n  fq: number;\n  pos = [];\n  a: number;\n  b: number;\n\n  constructor(amp, wl, width) {\n    this.amp = amp;\n    this.wl = wl;\n    this.fq = 1 / wl;\n    this.psng = new PSNG();\n    this.a = this.psng.next();\n    this.b = this.psng.next();\n    this.pos = [];\n\n    while (this.x < width) {\n      if (this.x % this.wl === 0) {\n        this.a = this.b;\n        this.b = this.psng.next();\n        this.pos.push(this.a * this.amp);\n      } else {\n        this.pos.push(\n          this.interpolate(this.a, this.b, (this.x % this.wl) / this.wl) *\n            this.amp\n        );\n      }\n      this.x++;\n    }\n  }\n\n  //cosine interpolation\n  interpolate(pa, pb, px) {\n    let ft = px * Math.PI;\n    let f = (1 - Math.cos(ft)) * 0.5;\n    return pa * (1 - f) + pb * f;\n  }\n\n  //octave generator\n  generateNoise(amp, wl, octaves, divisor, width) {\n    const result = [];\n    for (let i = 0; i < octaves; i++) {\n      result.push(new Perlin(amp, wl, width));\n      amp /= divisor;\n      wl /= divisor;\n    }\n    return result;\n  }\n\n  //combines octaves together\n  combineNoise(pl) {\n    const pos = [];\n    for (let i = 0, total = 0, j = 0; i < pl[0].pos.length; i++) {\n      total = 0;\n      for (j = 0; j < pl.length; j++) {\n        total += pl[j].pos[i];\n      }\n      pos.push(total);\n    }\n    return pos;\n  }\n}\n\nclass PSNG {\n  Z = 0;\n  //linear congruential generator parameters\n  M = 4294967296;\n  A = 1664525;\n  C = 1;\n\n  constructor() {\n    this.Z = Math.floor(Math.random() * this.M);\n  }\n\n  next() {\n    this.Z = (this.A * this.Z + this.C) % this.M;\n    return this.Z / this.M - 0.5;\n  }\n}\n", "import Canvas from \"../../canvas\";\nimport { worldTerrainSave } from \"./tilemap\";\nimport { Perlin } from \"../../utils/math\";\nimport { Terrain } from \"./tilemap\";\n\nexport default class WorldGen {\n  private canvas: Canvas = Canvas.getInstance();\n  private terrain: Terrain;\n  cnt = 0;\n\n  //Polish \uD558\uAE30\n  //\uB3D9\uAD74 \uBC0F \uBC14\uB2E4 \uAC15, \uB3CC\uACFC \uC624\uC5B4\n  //\uC800\uC7A5\uD558\uB294\uAC70\n\n  lastLayer = [];\n  layerCnt = 0;\n\n  constructor() {\n    this.terrain = Terrain.getInstance();\n  }\n\n  private makeSomeNoise(): Array<number> {\n    const perlin: Perlin = new Perlin(\n      128,\n      128,\n      Canvas.getInstance().getElement().width * 5\n    );\n    const result = perlin.combineNoise(\n      perlin.generateNoise(128, 128, 8, 2, this.canvas.getElement().width * 5)\n    );\n    return result;\n  }\n\n  public generateWorld() {\n    const noises: Array<number> = this.makeSomeNoise();\n    const element: HTMLCanvasElement = this.canvas.getElement();\n    const context: CanvasRenderingContext2D = this.canvas.getContext();\n    let mapHeight = element.height * 5;\n    let mapWidth = element.width * 5;\n    let height = mapHeight / 2;\n    let isTopSet = false;\n    context.clearRect(0, 0, mapWidth, mapHeight);\n\n    setTimeout(() => {\n      for (let i = 0; i < mapWidth; i += Terrain.tileSize) {\n        let top = height + noises[i];\n        isTopSet = false;\n        for (let j = 0; j < mapHeight; j++) {\n          worldTerrainSave[i][j] = false;\n          if (j <= top) continue;\n          if (j % Terrain.tileSize == 0) {\n            if (!isTopSet) {\n              worldTerrainSave[i][j] = true;\n              let randomTop = Math.floor(Math.random() * 3);\n              context.drawImage(\n                this.terrain.tileMap[\"tile\"][\"dirt\"][randomTop],\n                i,\n                j\n              );\n              isTopSet = true;\n            } else {\n              worldTerrainSave[i][j] = true;\n              context.drawImage(this.terrain.tileMap[\"tile\"][\"dirt\"][3], i, j);\n            }\n          }\n        }\n      }\n    }, 500);\n  }\n}\n", "import WorldGen from \"./worldgen\";\nimport { Terrain } from \"./tilemap\";\n\nexport default class World {\n  private worldgen: WorldGen = new WorldGen();\n  public terrainSave: object;\n\n  constructor() {}\n\n  public generateWorld() {\n    this.worldgen.generateWorld();\n  }\n}\n", "import Player from \"../player/player.mts\";\nimport World from \"./world/world\";\nimport Canvas from \"../canvas\";\nimport { worldTerrainSave } from \"./world/tilemap\";\n\nconst player = new Player(\"JohnSoo\", \"Resource/Character/3.png\");\nconst framesPerSecond = 60;\n\nclass Game {\n  private canvas = Canvas.getInstance();\n  private element = this.canvas.getElement();\n  private context = this.canvas.getContext();\n  private world = new World();\n  private frame = 0;\n  elemLeft: number;\n  elemTop: number;\n\n  constructor() {\n    window.addEventListener(\"keydown\", onKeyDown);\n    window.addEventListener(\"keyup\", onKeyUp);\n  }\n\n  startGame() {\n    this.canvas = Canvas.getInstance();\n    this.element = this.canvas.getElement();\n    this.context = this.canvas.getContext();\n    this.elemLeft = this.element.offsetLeft + this.element.clientLeft;\n    this.elemTop = this.element.offsetTop + this.element.clientTop;\n    this.element.onclick = ({ pageX, pageY }) => {\n      const x = pageX - this.elemLeft;\n      const y = pageY - this.elemTop;\n      console.log(x / 8, y * 8);\n\n      console.log(worldTerrainSave[pageX][pageY]);\n    };\n\n    player.setPosition(0, 2400);\n    this.world.generateWorld();\n    this.loop();\n  }\n\n  private loop() {\n    window.requestAnimationFrame(() => this.loop());\n    this.frame++;\n\n    //\uBA87\uAC00\uC9C0 \uC624\uB958\uC218\uC815\n    player.clearRect();\n    // console.log(lastLayer[Math.floor(player.xPos / 8)].toString());\n\n    if (!worldTerrainSave[player.position.x][player.position.y + 16]) {\n      player.position.y += 2;\n    } else {\n      player.canJump = true;\n    }\n\n    this.context.rect(\n      player.position.y,\n      player.position.y,\n      player.width,\n      player.height\n    );\n    this.context.fillStyle = \"rgba(0,0,0,0)\";\n    this.context.fill();\n\n    this.context.drawImage(\n      player.sprite,\n      player.position.x,\n      player.position.y,\n      player.width,\n      player.height\n    );\n    //console.log(\"Player Drawn Loc X : \" + player.xPos + \" Loc Y : \" + player.yPos + \" CanJump : \" + player.canJump);\n    //            console.log(\"Left : \" + worldTerrainSave[player.xPos - 8][player.yPos + 15]);\n    //            console.log(\"Right : \" + worldTerrainSave[player.xPos + 8][player.yPos + 15]);\n  }\n}\n\nfunction onKeyDown({ keyCode }) {\n  switch (keyCode) {\n    case 37:\n      if (\n        !worldTerrainSave[player.position.x - player.speed][player.position.y]\n      ) {\n        player.clearRect();\n        player.position.x -= player.speed;\n      }\n      break;\n    case 32:\n    case 38:\n      if (!player.canJump) break;\n      player.clearRect();\n      player.position.y -= player.jumpForce;\n      player.canJump = false;\n      break;\n    case 39:\n      if (\n        !worldTerrainSave[player.position.x + player.speed][player.position.y]\n      ) {\n        console.log(`${player.position.x} ${player.position.y}`);\n\n        player.clearRect();\n        player.position.x += player.speed;\n      }\n      break;\n    case 40:\n      player.clearRect();\n      player.position.y += player.jumpForce;\n      break;\n  }\n}\n\nfunction onKeyUp({ keyCode, type }) {}\n\nexport { Game, player };\n", "import Canvas from \"./canvas\";\nimport { Game } from \"./engine/game\";\n\nfunction init() {\n  const game = new Game();\n  Canvas.getInstance().initElement(\"mainCanvas\");\n  game.startGame();\n}\n\ninit();\n"],
  "mappings": "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",
  "names": []
}
